{
    "body": "On 27/04/2010 02:30, Benson Margulies wrote: \n> A quick benchmark of some CPU-intensive code of ours shows a quite marked \n> slowdown with that option turned on. \n \n(Not disagreeing with the general point.) \n \nFor what it's worth, I've been running Eclipse (on 10.6, 64-bit) with \nthe UseCompressedOoops option for months now - if anyone recalls, Apple \nfixed the issue with the default garbage collector so that it now \nautomatically chooses one that doesn't crash with that option - and it's \nvery fast. \n \nOf course, I only have my work computer to compare it against (which is \na Pentium 4 PC, with a hard drive that appears to have some kind of \nidentity issue, since it obviously thinks it's a C64 cassette) - but \nstill, I don't notice any performance problems. \n \nAlso note, I'm sure the behaviour is different on different benchmarks. \nI did a quick search and found two benchmarks: \n \nhttp://www.matsim.org/book/export/html/330 \nhttp://blog.juma.me.uk/tag/compressed-oops/ \n \nAs it happens, both these show a performance win for the option, but \nthese are only two samples. I'm sure certain usage patterns are indeed \nnoticeably slower so I agree, if using CPU-critical code where \nperformance is a concern, it's probably best to work out a repeatable \ntest and try both options. Just saying, 'assuming' is never a good idea, \nbut don't assume it'll be slower either. :) \n \n--sam \n _______________________________________________ \nDo not post admin requests to the list. They will be ignored. \nJava-dev mailing list (Java-dev@lists.apple.com) \nHelp/Unsubscribe/Update your Subscription: \nhttp://lists.apple.com/mailman/options/java-dev/mlsubscriber.tech%40csmining.org \n \nThis email sent to mlsubscriber.tech@csmining.org", 
    "to": [
        "java-dev@lists.apple.com"
    ], 
    "is_spam": false, 
    "from": "sam <sam@leafdigital.com>", 
    "subject": "Re: Don't be too quick to assume that -XX:+UseCompressedOops is a   good  thing"
}