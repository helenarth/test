{
    "body": "> I have an old project that I am restarting, and under Snow Leopard it is \n> broke. The problem didn't have a well documented solution in older OSes. I \n> am hoping to get some guidance. I would like to have a dedicated thread for \n> every IOBluetoothDevice/IOBluetoothRFCOMMChannel pair. \n> The runloop below exits immediately. IOBluetoothValidateHardware used to \n> perform enough side-effect magic to keep the runloop running. What \n> should startBlueToothThread look like? \n \nTo my knowledge, no part of the Bluetooth frameworks documentation \nsays anything about thread safety, and for that reason you must assume \nthat it is only safe to use from the main thread. \n \nAlso, a thread's run loop will only run if it has either run loop \nsources or timers attached; the fact that NSRunLoop's -run ever \nreturns means that it has neither. This is what I would expect based \non your -startBlueToothThread: method, as it doesn't appear to create \na source or timer. If you wanted to keep the thread alive, I would \nattach a dummy timer to the run loop that fires after some \nextraordinary amount of time. (Assuming you're not using the Bluetooth \nAPIs on the thread...) \n _______________________________________________ \nDo not post admin requests to the list. They will be ignored. \nBluetooth-dev mailing list (Bluetooth-dev@lists.apple.com) \nHelp/Unsubscribe/Update your Subscription: \nhttp://lists.apple.com/mailman/options/bluetooth-dev/mlsubscriber.tech%40csmining.org \n \nThis email sent to mlsubscriber.tech@csmining.org", 
    "to": [
        "David Giovannini <dsjove@mac.com>"
    ], 
    "is_spam": false, 
    "from": "Dave Keck <davekeck@csmining.org>", 
    "subject": "Re: Bluetooth and runloops in a dedicated thread."
}