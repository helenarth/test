{
    "body": "Hi All, \n \nI am stuck in the quicktime API ICMDecompressionSessionDecodeFrame() \nfor a while, and I could not find any other resources or any other \nsample code. Could any body help me out, and any suggestions \nappreciated. \n \nI want to import a movie file from local drive, get the compressed \nvideo frames, decode them, and encapsulate them into our own \nUncVideoUnit format. \nRight now we have already got the compressed video frames, but when we \nare trying to decode them, we have got some problem. Here is our \nsource code, could any body tell me if there is something wrong in our \ncode. \n \n \n // initialize callback structure \n ICMDecompressionTrackingCallbackRecord callRecord; \n callRecord.decompressionTrackingCallback = WriteFrameToBitmap; \n callRecord.decompressionTrackingRefCon = NULL; \n \n \n // add attributes for pixel buffer that comes out \n CFMutableDictionaryRef pixelBufferAttributes = NULL; \n pixelBufferAttributes = CFDictionaryCreateMutable( NULL, 0, \n&kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks ); \n \n OSType format = k24RGBPixelFormat; \n CFNumberRef pFormat = CFNumberCreate( NULL, kCFNumberSInt32Type, &format ); \n CFDictionaryAddValue( pixelBufferAttributes, \nkCVPixelBufferPixelFormatTypeKey, pFormat ); \n CFRelease( pFormat ); \n \n int width = 1280; \n CFNumberRef pWidth = CFNumberCreate( NULL, kCFNumberIntType, &width ); \n CFDictionaryAddValue( pixelBufferAttributes, \nkCVPixelBufferWidthKey, pWidth ); \n CFRelease( pWidth ); \n \n int height = 720; \n CFNumberRef pHeight = CFNumberCreate( NULL, kCFNumberIntType, &height ); \n CFDictionaryAddValue( pixelBufferAttributes, \nkCVPixelBufferHeightKey, pHeight ); \n CFRelease( pHeight ); \n \n \n // set up decompression session \n ICMDecompressionSessionRef decompressionSession; \n ImageDescriptionHandle description = \n(ImageDescriptionHandle)NewHandleClear(sizeof(ImageDescription)); \n OSStatus nStatus = ICMDecompressionSessionCreate ( NULL, \ndescription, NULL, pixelBufferAttributes, &callRecord, \n&decompressionSession); \n CFRelease( pixelBufferAttributes ); \n \n \n // get video frames from movie files and decode each frame \n TimeValue64 startTime = \nGetMediaAdvanceDecodeTime(GetTrackMedia(track)); // for starting \ntime of each frame \n TimeValue64 DurationPerSample = 0; // fro duration of each frame \n int count = 0; \n while(true) \n { \n ByteCount size = 0; \n UInt8 *aData = new unsigned char[maxDataSize]; \n nErr = GetMediaSample2(videoMedia, aData, maxDataSize, &size, \nstartTime, nil, &DurationPerSample, nil, nil, nil, 1, nil, nil); \n \n \n OSStatus nStatus = ICMDecompressionSessionDecodeFrame( \ndecompressionSession, (const UInt8*)aData, size, NULL, NULL, (void \n*)&count ); \n \n \n count++; \n startTime += DurationPerSample; \n \n if(nErr != noErr) \n break; \n \n delete [] aData; \n } \n \n \n \nHere is the definition for the callback funtion: \n \n \nstatic void WriteFrameToBitmap( \n void *decompressionTrackingRefCon, \n OSStatus result, \n ICMDecompressionTrackingFlags decompressionTrackingFlags, \n CVPixelBufferRef pixelBuffer, \n TimeValue64 displayTime, \n TimeValue64 displayDuration, \n ICMValidTimeFlags validTimeFlags, \n void *reserved, \n void *sourceFrameRefCon ) \n{ \n // when we get decoded frame, print it out to bitmap \n if ( (result == noErr) && (decompressionTrackingFlags & \nkICMDecompressionTracking_EmittingFrame) && pixelBuffer ) \n { \n char num[16]; \n sprintf_s(num, 16, \"%d\", *((int *)sourceFrameRefCon)); \n std::string strFilePath = std::string(\"Bitmap0\") + std::string(num); \n \n boost::shared_ptr pMyImage = StillImage::CreateInstance(); \n size_t size = CVPixelBufferGetDataSize(pixelBuffer); \n BYTE *mem_buffer = (BYTE*)malloc(size * sizeof(BYTE)); \n strcpy((char*)mem_buffer, (char *)CVPixelBufferGetBaseAddress(pixelBuffer)); \n pMyImage->LoadImage(mem_buffer, size); \n pMyImage->SaveImage(strFilePath.c_str(), BMP); \n } \n \n \n} \n \n \nThanks very much. \n \nBo Peng \nSoftware Engineer \nCapella Systems, LLC \n _______________________________________________ \nDo not post admin requests to the list. They will be ignored. \nQuickTime-API mailing list (QuickTime-API@lists.apple.com) \nHelp/Unsubscribe/Update your Subscription: \nhttp://lists.apple.com/mailman/options/quicktime-api/mlsubscriber.tech%40csmining.org \n \nThis email sent to mlsubscriber.tech@csmining.org", 
    "to": [
        "quicktime-api@lists.apple.com"
    ], 
    "is_spam": false, 
    "from": "Bo Peng <bpeng@capellasystems.net>", 
    "subject": "ICMDecompressionSessionDecodeFrame() is not working"
}